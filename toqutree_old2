
/**
 *
 * toqutree (pa3)
 * significant modification of a quadtree .
 * toqutree.cpp
 * This file will be used for grading.
 *
 */

#include "toqutree.h"
#include "math.h"

toqutree::Node::Node(pair<int,int> ctr, int dim, HSLAPixel a)
	:center(ctr),dimension(dim),avg(a),NW(NULL),NE(NULL),SE(NULL),SW(NULL)
	{}

toqutree::~toqutree(){
	clear(root);
}

toqutree::toqutree(const toqutree & other) {
	root = copy(other.root);
}


toqutree & toqutree::operator=(const toqutree & rhs){
	if (this != &rhs) {
		clear(root);
		root = copy(rhs.root);
	}
	return *this;
}

toqutree::toqutree(PNG & imIn, int k){ 

/* This constructor grabs the 2^k x 2^k sub-image centered */
/* in imIn and uses it to build a quadtree. It may assume  */
/* that imIn is large enough to contain an image of that size. */

/* your code here */
std::cout << "making tree now" << endl;
	if (imIn.width() == pow(2,k) && imIn.height() == pow(2,k)){
		std::cout << "going to build tree here! imIn height: " << imIn.height() << "k: " << k << endl;
		std::cout << "going to build tree here! imIn width: " << imIn.width() << "k: " << k << endl;
		buildTree(imIn, k);
	} else {
	pair<int,int> ctrPoint;
	ctrPoint.first = imIn.width()/2;
	ctrPoint.second = imIn.height()/2;
	PNG subIm(ctrPoint.first, ctrPoint.second);
		// grab 2^k * 2 ^k subimage centered
		for (unsigned int i = 0; i < pow(2, k); i++){
			for (unsigned int j = 0; j < pow(2, k); j++){
				HSLAPixel * pixelSub = subIm.getPixel(i, j);
				* pixelSub = *imIn.getPixel(ctrPoint.first - pow(2,k-1) + i, ctrPoint.second - pow(2,k-1) + j);
			}
		}
		std::cout << "going to build tree 2" << endl;
		std::cout << "subimage passed: " << ctrPoint.first << " " << ctrPoint.second << endl;
		buildTree(subIm, k);
	}

}

int toqutree::size() {
	return countSize(root);
/* your code here */
}


toqutree::Node * toqutree::buildTree(PNG & im, int k) {
	std::cout << "entered BuildTree" << endl;
	stats s(im);
	int width = im.width();
	int height = im.height();
	pair<int,int> ul(0,0);
	pair<int,int> lr(width - 1, height - 1);
	HSLAPixel avgPixel = s.getAvg(ul,lr);
	pair<int,int> optSplitPos;
	// Base cases
	if (k == 0){
		Node* node = new Node(ul, k, avgPixel);
		return node;
	}

	PNG nwChild(width/2, height/2);
	PNG seChild(width/2, height/2);
	PNG swChild(width/2, height/2);
	PNG neChild(width/2, height/2);
	std::cout << "BuildTree before if k = 1" << endl;
	if (k == 1){

		HSLAPixel * pixelNewNW = nwChild.getPixel(0, 0);
		pixelNewNW = im.getPixel(0,0);

		HSLAPixel * pixelNewSe = seChild.getPixel(0, 0);
		pixelNewSe = im.getPixel(1,1);

		HSLAPixel * pixelNewSw = swChild.getPixel(0, 0);
		pixelNewSw = im.getPixel(0,1);
		
		HSLAPixel * pixelNewNe = neChild.getPixel(0, 0);
		pixelNewNe = im.getPixel(1,0);

	}

	
	else {
		std::cout << "build tree - check else" << endl;
		// find centre
		unsigned int ctrUl_x = width/4; //4
		unsigned int ctrUl_y = height/4; // 4
		unsigned int ctrLr_x = width - ctrUl_x - 1; //11
		unsigned int ctrLr_y = height - ctrUl_y - 1; //11

		double minEnt = 1000000.0;
		double avgEntropy;

		for (unsigned int x = ctrUl_x; x <= ctrLr_x; x++){
			for (unsigned int y = ctrUl_y; y <= ctrLr_y; y ++){
				// when SE is a full set
				if((x+ (width/2) -1 <= width -1) && (y + (height/2) -1 < height -1)) {
					pair<int,int> seUl(x,y);
					pair<int,int> seLr(x + width/2 -1, y + height/2 -1);
					if (seLr.first == width -1)

				}

					}
				} 
			}
		}

		

		// after 4 for loops - make child image (5 cases based on the splitPoint)
		unsigned int optX = optSplitPos.first;
		unsigned int optY = optSplitPos.second;
		std::cout << "after 4 for loop" << endl;

		if(optX == (unsigned int) width/2 && optY == (unsigned int) height/2) {
			// perfect four squares 
			// Q : k-- is correct?
			pair<int,int> nwUl(0,0);
			pair<int,int> swUl(0,optY);
			pair<int,int> neUl(optX,0);

			seChild = makeImageNoStitch(k--, im, optSplitPos);
			swChild = makeImageNoStitch(k--, im, swUl);
			nwChild = makeImageNoStitch(k--, im, nwUl);
			neChild = makeImageNoStitch(k--, im, neUl);

		} else if ((ctrUl_x <= optX) && (optX <= (unsigned int) width/2) && (ctrUl_y <= optY) && (optY <= (unsigned int) height/2)) {
			// SE is square
			seChild = makeImageNoStitch(k--, im, optSplitPos);
			swChild = stitchImgVertical(k--, im, optSplitPos);
			neChild = stitchImgHor(k--, im, optSplitPos);
			nwChild = stitchImgVandH(k--, im, optSplitPos);

		} else if (((unsigned int) width/2 < optX) && (optX <= ctrLr_x) && (ctrUl_y <= optY) && (optY <= (unsigned int) height/2)) {
			// SE stitch vertically
			// sw has full image
			pair<int,int> indexPos(optX - (width/2) , optY);
			seChild = stitchImgVertical(k--, im, indexPos);
			swChild = makeImageNoStitch(k--, im, indexPos);
			nwChild = stitchImgHor(k--, im, indexPos);
			neChild = stitchImgVandH(k--, im, indexPos);

		} else if ((ctrUl_x <= optX) && (optX <= (unsigned int) width/2) && ((unsigned int) height/2 < optY) && (optY <= ctrLr_y)) {
			// SE stitch horizontally 
			// ne has full image
			pair<int,int> indexPos(optX, optY - (height/2));
			seChild = stitchImgHor(k--, im, indexPos);
			swChild = stitchImgVandH(k--, im, indexPos);
			nwChild = stitchImgVertical(k--, im, indexPos);
			neChild = makeImageNoStitch(k--, im, indexPos);

		} else if (((unsigned int) width/2 < optX) && (optX <= ctrLr_x) && ((unsigned int) height/2 < optY) && (optY <= ctrLr_y)) {
			// SE stitch vertically + horizontally 
			// nw has full image
			pair<int,int> indexPos(optX - (width/2), optY - (height/2));
			seChild = stitchImgVandH(k--, im, indexPos);
			swChild = stitchImgHor(k--, im, indexPos);
			nwChild = makeImageNoStitch(k--, im, indexPos);
			neChild = stitchImgVertical(k--, im, indexPos);

		} else {
			std::cout << "Something is wrong!(buildTree)" << endl;
		}
	}

	// for splitting
	// TODO: have to get optSplitPos first 
	// Make 4 PNG im for each child
	Node* node = new Node(optSplitPos, k, avgPixel);

	// Call Recursive func here
	node->NW = buildTree(nwChild, k--);
	node->NE = buildTree(neChild, k--);
	node->SE = buildTree(seChild, k--);
	node->SW = buildTree(swChild, k--);

	return node;
}

/* your code here */

// Note that you will want to practice careful memory use
// In this function. We pass the dynamically allocated image
// via pointer so that it may be released after it is used .
// similarly, at each level of the tree you will want to 
// declare a dynamically allocated stats object, and free it
// once you've used it to choose a split point, and calculate
// an average.

PNG toqutree::render(){
	unsigned int width = pow(2, root->dimension);
	unsigned int height =  width;
	PNG toRender(width, height);

	toRender = renderHelper(toRender, root);
	//TODO: to add helper here.. Question: how to connnect RenderHelper with our previous stitchImages????

// My algorithm for this problem included a helper function
// that was analogous to Find in a BST, but it navigated the 
// quadtree, instead.

/* your code here */

	return toRender;
}

/* oops, i left the implementation of this one in the file! */
void toqutree::prune(double tol){
	//TODO NOTE: no need to pass in avgCol. just calculate based on HSLA dist.
	// if (root->NE == NULL){ // no children, nothing to prune.
	// 	return; 
	// }
	pruneHelper(root, tol);
}

/* called by destructor and assignment operator*/
void toqutree::clear(Node * & curr){
/* your code here */
	if (curr == NULL){
		return;
	}
	if (curr->NE != NULL){
		clear(curr->NE);
		clear(curr->NW);
		clear(curr->SE);
		clear(curr->SW);
	}
	delete curr;
	curr = NULL;
}

/* done */
/* called by assignment operator and copy constructor */
toqutree::Node * toqutree::copy(const Node * other) {
	if (other == NULL) {
        return NULL;
    }
	Node * newNode = new Node(other->center, other->dimension, other->avg);

	if (other->NW != NULL)
	{
		newNode->NW = copy(other->NW);
		newNode->NE = copy(other->NE);
		newNode->SE = copy(other->SE);
		newNode->SW = copy(other->SW);
	}
	 return newNode;
/* your code here */
}


//** HELPERS****

int toqutree::countSize(Node * root){
	if (root == NULL ){
		return 0;
	} else if (root->NW == NULL){ // will always have 4 child and first child is NW.
		return 1;
	} else {
		return (countSize(root->NW) + countSize(root->NE) + countSize(root->SE) + countSize(root->SW));
	}
}

PNG toqutree::makeImageNoStitch(int dim, PNG & im, pair<int,int> splitPoint){
	unsigned int width = pow(2,dim);
	unsigned int height = width;
	PNG newIm(width, height);
	for (unsigned int i = 0; i < width; i++){
		for (unsigned int j = 0; j < height; j++){
			HSLAPixel * pixelNew = newIm.getPixel(i, j);
			* pixelNew = *im.getPixel(splitPoint.first + i, splitPoint.second + j);
		}
	}
	return newIm;

}

// TODO: return pointer or &???
PNG toqutree::stitchImgVertical(int dim, PNG & im, pair<int,int> splitPoint){
	unsigned int width = pow(2,dim);
	unsigned int height = width;
	PNG newIm(width, height);
	int x = splitPoint.first; // 7
	int y = splitPoint.second; // 7

	// first vertical
	for (unsigned int i = 0; i < width - x; i++){
		for (unsigned int j = 0; j < height; j++){
			HSLAPixel * pixelNew = newIm.getPixel(i, j);
			* pixelNew = *im.getPixel(width + x + i, y + j);
		}
	}

	// second vertical
	for (unsigned int i = width - x ; i < (unsigned int) x; i++){
		for (unsigned int j = 0 ; j < height; j++){
			HSLAPixel * pixelNew = newIm.getPixel(i, j);
			* pixelNew = *im.getPixel(i, y + j);
		}
	}
	return newIm;

}

PNG toqutree::stitchImgHor(int dim, PNG & im, pair<int,int> splitPoint){
	unsigned int width = pow(2,dim);
	unsigned int height = width;
	PNG newIm(width, height);
	int x = splitPoint.first; // 7
	int y = splitPoint.second; // 7

	// first Horizontal (bottom)
	for (unsigned int i = 0; i < width; i++){
		for (unsigned int j = 0; j < height - y; j++){
			HSLAPixel * pixelNew = newIm.getPixel(i, j);
			* pixelNew = *im.getPixel(x + i, y + height + j);
		}
	}

	// second Horizontal (top)
	for (unsigned int i = 0; i < width; i++){
		for (unsigned int j = height - y; j <(unsigned int) y; j++){
			HSLAPixel * pixelNew = newIm.getPixel(i, j);
			pixelNew = im.getPixel(x + i, j);
		}
	}

	return newIm;

}

PNG toqutree::stitchImgVandH(int dim, PNG & im, pair<int,int> splitPoint){
	unsigned int width = pow(2,dim);
	unsigned int height = width;
	PNG newIm(width, height);
	int x = splitPoint.first; // 7
	int y = splitPoint.second; // 7

	// #4 bottom right corner
	for (unsigned int i = 0; i < (unsigned int) width - x; i++){
		for (unsigned int j = 0; j < (unsigned int) height - y; j++){
			HSLAPixel * pixelNew = newIm.getPixel(i, j);
			* pixelNew = *im.getPixel( x + width + i, y + height + j);
		}
	}

	// #3 bottom left corner
	for (unsigned int i = width - x; i < (unsigned int) x; i++){
		for (unsigned int j = 0; j < (unsigned int) height - y; j++){
			HSLAPixel * pixelNew = newIm.getPixel(i, j);
			* pixelNew = *im.getPixel(i, y + height + j);
		}
	}

	// #2 Top right corner
	for (unsigned int i = 0; i < (unsigned int) width - x; i++){
		for (unsigned int j = height - y; j < (unsigned int) y; j++){
			HSLAPixel * pixelNew = newIm.getPixel(i, j);
			* pixelNew = *im.getPixel( x + width + i, j);
		}
	}

	// #1 Top left corner
	for (unsigned int i = width - x; i < (unsigned int) x; i++){
		for (unsigned int j = height - y; j < (unsigned int) y; j++){
			HSLAPixel * pixelNew = newIm.getPixel(i, j);
			* pixelNew = *im.getPixel(i, j);
		}
	}

	return newIm;
}

bool toqutree::isMinEntropy(double min, double avg){
	if (avg < min){
		return true;
	}
	return false;
}

double toqutree::getEntropyTopLeftQ(pair<int, int> curSplitPos, long rectArea, int width, int height, stats s) {
	// std::cout << "build tree - get Entropy Top Left Q" << endl;
	int x = curSplitPos.first;
	int y = curSplitPos.second;
	pair<int,int> lrSe((width/2) + x - 1,(height/2) + y - 1);
	double entropySE = s.entropy(curSplitPos, lrSe);

	pair<int,int> ulNwTopLeft(0,0);
	pair<int,int> lrNwTopLeft(x-1,y-1);
	pair<int,int> ulNwTopright(((width/2) + x),0);
    pair<int,int> lrNwTopright(width-1,y-1);
	pair<int,int> ulNwBottomLeft(0, (y+(height/2)));
	pair<int,int> lrNwBottomLeft((x-1) , (height -1));
	pair<int,int> ulNwBottomRight((width/2)+x, y+(height/2));
	pair<int,int> lrNwBottomRight( (width -1), (height -1));
	double entropyNW = getEntropyFromFour(ulNwTopLeft, lrNwTopLeft, ulNwTopright, lrNwTopright, ulNwBottomLeft, lrNwBottomLeft, ulNwBottomRight, lrNwBottomRight, s, rectArea);
	// std::cout << "entropyNW: " << entropyNW << endl;

	pair<int,int> ulSeRight((width/2) + x,y);
	pair<int,int> lrSeRight(width -1,(height/2) + y - 1);
	pair<int,int> ulSeLeft(0,y);
	pair<int,int> lrSeLeft(x-1,(height/2) + y - 1);
	double entropySW = getEntropyFromTwo(ulSeRight,lrSeRight,ulSeLeft,lrSeLeft, s, rectArea);


	pair<int,int> ulNeTop(x,0);
	pair<int,int> lrNeTop((width/2) + x - 1,y-1);
	pair<int,int> ulNeBottom(x,y+(height/2));
	pair<int,int> lrNeBottom((width/2) + x - 1,height -1);
	double entropyNE = getEntropyFromTwo(ulNeTop,lrNeTop,ulNeBottom,lrNeBottom, s, rectArea);

	return ((entropySE + entropyNW + entropySW + entropyNE) / 4);
}

double toqutree::getEntropyTopRightQNoSplit(pair<int, int> curSplitPos, long rectArea, int width, int height, stats s) {
	int x = curSplitPos.first;
	int y = curSplitPos.second;
	pair<int,int> lrSe(width -1, y + (height/2) - 1);
	double entropySE = s.entropy(curSplitPos, lrSe);

	pair<int,int> ulSw(0, y);
	pair<int,int> lrSw(x-1, y + (height/2) - 1);
	double entropySW = s.entropy(ulSw, lrSw);

	pair<int,int> ulNeTop(x, 0);
	pair<int,int> lrNeTop(width-1, y - 1);
	pair<int,int> ulNeBottom(x, y + (height/2));
	pair<int,int> lrNeBottom(width -1, height -1);
	double entropyNE = getEntropyFromTwo(ulNeTop,lrNeTop,ulNeBottom,lrNeBottom, s, rectArea);
	
	pair<int,int> ulNwTop(0, 0);
	pair<int,int> lrNwTop(x-1, y - 1);
	pair<int,int> ulNwBottom(0, y + (height/2));
	pair<int,int> lrNwBottom(x -1, height -1);
	double entropyNW = getEntropyFromTwo(ulNwTop,lrNwTop,ulNwBottom,lrNwBottom, s, rectArea);
	
	return (entropySE + entropyNW + entropySW + entropyNE) / 4;
}

double toqutree::getEntropyTopRightQ(pair<int, int> curSplitPos, long rectArea, int twokWidth, int twokHeight, stats s) {
	int x = curSplitPos.first;
	int y = curSplitPos.second;
	
	pair<int,int> ulSeRight(x, y);
	pair<int,int> lrSeRight((twokWidth -1), (y + (twokHeight/2) - 1));
	pair<int,int> ulSeLeft(0, y);
	pair<int,int> lrSeLeft((x- (twokWidth/2) - 1), (y + (twokHeight/2) - 1));

	double entropySE = getEntropyFromTwo(ulSeRight,lrSeRight,ulSeLeft,lrSeLeft, s, rectArea);

	pair<int,int> ulSw(x- (twokWidth/2), y);
	pair<int,int> lrSw(x-1, y + (twokHeight/2) - 1);
	double entropySW = s.entropy(ulSw,lrSw);

	pair<int,int> ulNwTop(x- (twokWidth/2), 0);   // (x,y) = (10,6)
	pair<int,int> lrNwTop(x-1, y-1);
	pair<int,int> ulNwBottom(x- (twokWidth/2), y+(twokHeight/2));
	pair<int,int> lrNwBottom(x-1, twokHeight- 1);
	double entropyNW = getEntropyFromTwo(ulNwTop,lrNwTop, ulNwBottom, lrNwBottom, s, rectArea);

	pair<int,int> ulNeTopRight(x, 0);   
	pair<int,int> lrNeTopRight(twokWidth-1, y-1);
	pair<int,int> ulNeBottomRight(x, y+(twokHeight/2));
	pair<int,int> lrNeBottomRight(twokWidth-1, twokHeight- 1);
	pair<int,int> ulNeTopLeft(0, 0);   
	pair<int,int> lrNeTopLeft(x-(twokWidth/2)-1, y-1);
	pair<int,int> ulNeBottomLeft(0, y+(twokHeight/2));
	pair<int,int> lrNeBottomLeft(x-(twokWidth/2)-1, twokHeight-1);
	double entropyNE = getEntropyFromFour(ulNeTopRight, lrNeTopRight, ulNeBottomRight, lrNeBottomRight, ulNeTopLeft, lrNeTopLeft, ulNeBottomLeft, lrNeBottomLeft, s, rectArea);

	return (entropySE + entropyNW + entropySW + entropyNE) / 4;
}

double toqutree::getEntropyFromFour(pair<int,int> ulTopRight, pair<int,int> lrTopRight, pair<int,int> ulBottomRight,
pair<int,int> lrBottomRight, pair<int,int> ulTopLeft, pair<int,int> lrTopLeft, pair<int,int> ulBottomLeft,pair<int,int> lrBottomLeft, stats s, long rectArea) {
	double entropy = ((s.entropy(ulTopLeft, lrTopLeft) * s.rectArea(ulTopLeft, lrTopLeft))
						+ (s.entropy(ulTopRight, lrTopRight) * s.rectArea(ulTopRight, lrTopRight))
						+ (s.entropy(ulBottomLeft, lrBottomLeft) * s.rectArea(ulBottomLeft, lrBottomLeft))
						+ (s.entropy(ulBottomRight, lrBottomRight) * s.rectArea(ulBottomRight, lrBottomRight)))
						/rectArea;
	return entropy;
}

double toqutree::getEntropyFromTwo(pair<int,int> ulTop, pair<int,int> lrTop, pair<int,int> ulBottom,
pair<int,int> lrBottom, stats s, long rectArea) {
	double entropy = (((s.entropy(ulTop,lrTop) * (s.rectArea(ulTop,lrTop)))
					  + (s.entropy(ulBottom,lrBottom) * (s.rectArea(ulBottom,lrBottom))))
					  / rectArea);

	return entropy;
}

double toqutree::getEntropyBottomRightQfourPerfectSquares(pair<int, int> curSplitPos, long rectArea, int twokWidth, int twokheight, stats s) {
	int x = curSplitPos.first;
	int y = curSplitPos.second;
	pair<int,int> ulSe = curSplitPos;
	pair<int,int> lrSe(twokWidth-1, twokheight-1);
	double entropySE = s.entropy(ulSe, lrSe);

	pair<int,int> ulSw(0, y);
	pair<int,int> lrSw(x-1, twokheight-1);
	double entropySW = s.entropy(ulSw, lrSw);

	pair<int,int> ulNE(x, 0);
	pair<int,int> lrNE(twokWidth-1, y-1);
	double entropyNE = s.entropy(ulNE, lrNE);

	
	pair<int,int> ulNW(0, 0);
	pair<int,int> lrNW(x-1, y - 1);
	double entropyNW = s.entropy(ulNW, lrNW);
	
	return (entropySE + entropyNW + entropySW + entropyNE) / 4;
}

double toqutree::getEntropyBottomRighNENWNoSplits(pair<int, int> curSplitPos, long rectArea, int twokWidth, int twokheight, stats s) {
	int x = curSplitPos.first;
	int y = curSplitPos.second;
	pair<int,int> ulNE(x, y - (twokheight/2));
	pair<int,int> lrNE(twokWidth-1, y -1);
	double entropyNE = s.entropy(ulNE, lrNE);

	pair<int,int> ulNW(0, y - (twokheight/2));
	pair<int,int> lrNW(x-1, y - 1);
	double entropyNW = s.entropy(ulNW, lrNW);

	pair<int,int> ulSWTop(0, 0);
	pair<int,int> lrSWTop(x-1, y - (twokheight/2));
	pair<int,int> ulSWBottom(0, y);
	pair<int,int> lrSWBottom(x-1, twokheight -1);
	double entropySW = getEntropyFromTwo(ulSWTop,lrSWTop,ulSWBottom,lrSWBottom, s, rectArea);
	
	pair<int,int> ulSETop(x, 0);
	pair<int,int> lrSETop(twokWidth-1, y - (twokheight/2) - 1);
	pair<int,int> ulSEBottom(x, y);
	pair<int,int> lrSEBottom(twokWidth-1, twokheight -1);
	double entropySE = getEntropyFromTwo(ulSETop,lrSETop,ulSEBottom,lrSEBottom, s, rectArea);
	
	return (entropySE + entropyNW + entropySW + entropyNE) / 4;
}

double toqutree::getEntropyBottomRighNWSWNoSplits(pair<int, int> curSplitPos, long rectArea, int twokWidth, int twokheight, stats s) {
	int x = curSplitPos.first;
	int y = curSplitPos.second;


	pair<int,int> ulNW(x - (twokWidth/2), y - (twokWidth/2)); // y will be 0
	pair<int,int> lrNW(x-1, y - 1);
	double entropyNW = s.entropy(ulNW, lrNW);

	pair<int,int> ulSW(x - (twokWidth/2), y);
	pair<int,int> lrSW(x-1, twokheight - 1);
	double entropySW = s.entropy(ulSW, lrSW);

	pair<int,int> ulNELeft(0, 0);
	pair<int,int> lrNELeft(x - (twokWidth/2) - 1 , y -1);
	pair<int,int> ulNERight(x, 0);
	pair<int,int> lrNERight(twokWidth-1, y -1);
	double entropyNE = getEntropyFromTwo(ulNELeft,lrNELeft,ulNERight,lrNERight, s, rectArea);

	
	pair<int,int> ulSELeft(0, y);
	pair<int,int> lrSELeft(x - (twokWidth/2) - 1, twokheight - 1);
	pair<int,int> ulSERight(x, y);
	pair<int,int> lrSERight(twokWidth-1, twokheight -1);
	double entropySE = getEntropyFromTwo(ulSELeft,lrSELeft,ulSERight,lrSERight, s, rectArea);
	
	return (entropySE + entropyNW + entropySW + entropyNE) / 4;
}

double toqutree::getEntropyBottomRighOnlyNWnoSplit(pair<int, int> curSplitPos, long rectArea, int twokWidth, int twokheight, stats s) {
	int x = curSplitPos.first;
	int y = curSplitPos.second;


	pair<int,int> ulNW(x - (twokWidth/2), y - (twokheight/2));
	pair<int,int> lrNW(x-1, y - 1);
	double entropyNW = s.entropy(ulNW, lrNW);

	pair<int,int> ulSWTop(x - (twokWidth/2), 0);
	pair<int,int> lrSWTop(x-1, y - (twokheight/2) - 1);
	pair<int,int> ulSWBottom(x - (twokWidth/2), y);
	pair<int,int> lrSWBottom(x - 1, twokheight - 1);
	double entropySW = getEntropyFromTwo(ulSWTop,lrSWTop,ulSWBottom,lrSWBottom, s, rectArea);

	pair<int,int> ulNELeft(0, y - (twokheight/2));
	pair<int,int> lrNELeft(x - (twokWidth/2) - 1 , y -1);
	pair<int,int> ulNERight(x, y - (twokheight/2));
	pair<int,int> lrNERight(twokWidth-1, y -1);
	double entropyNE = getEntropyFromTwo(ulNELeft,lrNELeft,ulNERight,lrNERight, s, rectArea);

	
	pair<int,int> ulSETopLeft(0, 0);   
	pair<int,int> lrSETopLeft(x-(twokWidth/2)-1, y - (twokheight/2)-1);
	pair<int,int> ulSETopRight(x, 0);   
	pair<int,int> lrSETopRight(twokWidth-1,  y - (twokheight/2)-1);
	pair<int,int> ulSEBottomLeft(0, y);
	pair<int,int> lrSEBottomLeft(x-(twokWidth/2)-1, twokheight-1);
	pair<int,int> ulSEBottomRight(x, y);
	pair<int,int> lrSEBottomRight(twokWidth-1, twokheight- 1);
	double entropySE = getEntropyFromFour(ulSETopLeft, lrSETopLeft, ulSETopRight, lrSETopRight, ulSEBottomLeft, lrSEBottomLeft, 
	ulSEBottomRight, lrSEBottomRight, s, rectArea);
	
	return (entropySE + entropyNW + entropySW + entropyNE) / 4;
}

double toqutree::getEntropyBottomLeftQNoSplit(pair<int, int> curSplitPos, long rectArea, int twokWidth, int twokheight, stats s) {
	int x = curSplitPos.first;
	int y = curSplitPos.second;

	pair<int,int> ulSE(x, y);   
	pair<int,int> lrSE(x+(twokWidth/2)-1, twokheight -1);
	double entropySE = s.entropy(ulSE, lrSE);

	pair<int,int> ulNE(x, 0);   
	pair<int,int> lrNE(x+(twokWidth/2)-1, y-1);
	double entropyNE = s.entropy(ulNE,lrNE);

	pair<int,int> ulNWLeft(x+(twokWidth/2), 0);   
	pair<int,int> lrNWLeft(twokWidth -1, y-1);
	pair<int,int> ulNWRight(0, 0);   
	pair<int,int> lrNWRight(x-1, y -1);
	double entropyNW = getEntropyFromTwo(ulNWLeft,lrNWLeft,ulNWRight,lrNWRight,s,rectArea);

	pair<int,int> ulSWLeft(x+(twokWidth/2), y);   
	pair<int,int> lrSWLeft(twokWidth -1, twokheight -1);
	pair<int,int> ulSWRight(0, y);   
	pair<int,int> lrSWRight(x-1, twokheight -1);
	double entropySW = getEntropyFromTwo(ulSWLeft,lrSWLeft,ulSWRight,lrSWRight,s,rectArea);

	return (entropySE + entropyNW + entropySW + entropyNE) / 4;
}

double toqutree::getEntropyBottomLeftQ(pair<int, int> curSplitPos, long rectArea, int twokWidth, int twokheight, stats s) {
	int x = curSplitPos.first;
	int y = curSplitPos.second;

	pair<int,int> ulSETop(x, 0);   
	pair<int,int> lrSETop(x+(twokWidth/2) -1, y-(twokheight/2) -1);
	pair<int,int> ulSEBottom(x, y);   
	pair<int,int> lrSEBottom(x+(twokWidth/2) -1, twokheight -1);
	double entropySE = getEntropyFromTwo(ulSETop,lrSETop,ulSEBottom,lrSEBottom,s,rectArea);

	pair<int,int> ulNE(x, y-(twokheight/2));   
	pair<int,int> lrNE(x+(twokWidth/2) -1, y-1);
	double entropyNE = s.entropy(ulNE,lrNE);

	pair<int,int> ulNWLeft(0, y-(twokheight/2));   
	pair<int,int> lrNWLeft(x-1, y-1);
	pair<int,int> ulNWRight(x+(twokWidth/2), y-(twokheight/2));   
	pair<int,int> lrNWRight(twokWidth -1, y-1);
	double entropyNW = getEntropyFromTwo(ulNWLeft,lrNWLeft,ulNWRight,lrNWRight,s,rectArea);

	pair<int,int> ulSWTopLeft(0, 0);   
	pair<int,int> lrSWTopLeft(x-1, y-(twokheight/2) -1);
	pair<int,int> ulSWTopRight(x+(twokWidth/2), 0);   
	pair<int,int> lrSWTopRight(twokWidth-1, y-(twokheight/2) -1);
	pair<int,int> ulSWBottomLeft(0, y);   
	pair<int,int> lrSWBottomLeft(x-1, twokheight -1);
	pair<int,int> ulSWBottomRight(x+(twokWidth/2), y);   
	pair<int,int> lrSWBottomRight(twokWidth-1, twokheight -1);
	double entropySW = getEntropyFromFour(ulSWTopLeft,lrSWTopLeft,ulSWTopRight,lrSWTopRight,ulSWBottomLeft,lrSWBottomLeft,ulSWBottomRight,lrSWBottomRight,s,rectArea);

	return (entropySE + entropyNW + entropySW + entropyNE) / 4;

	}


PNG toqutree::renderHelper(PNG & toRender, Node * root){
	//TODO!!!
	return toRender;
}

void toqutree::pruneHelper(Node * & aNode, double tol) {
	std::cout << "prunehelper" << endl;
	if (aNode == NULL){ // no children, nothing to prune.
		return;
	}
	HSLAPixel avgToCheck = aNode->avg;
	if (withinTolerance(aNode, tol, avgToCheck)) {
		std::cout << "clearing" << endl;
		clear(aNode->NE);
		clear(aNode->NW);
		clear(aNode->SE);
		clear(aNode->SW);
	} else {
		std::cout << "else prune" << endl;
		pruneHelper(aNode->NE,tol);
		pruneHelper(aNode->NW,tol);
		pruneHelper(aNode->SE,tol);
		pruneHelper(aNode->SW,tol);
	}	
}

bool toqutree::withinTolerance(Node * node,  double tol, HSLAPixel nodePixel){
	// bool withinTol = false;
	std::cout << "calculating" << endl;
	if (node->NE == NULL){
		if ((((node->avg).dist(nodePixel)) <= tol)){
			return true;
		}
		return false;
	}

	return (withinTolerance(node->NE, tol, nodePixel) && withinTolerance(node->NW, tol, nodePixel)
	&& withinTolerance(node->SE, tol, nodePixel) && withinTolerance(node->SW, tol, nodePixel));
}



